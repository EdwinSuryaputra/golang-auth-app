// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/adapters/sql/gorm/model"
)

func newActivityLog(db *gorm.DB, opts ...gen.DOOption) activityLog {
	_activityLog := activityLog{}

	_activityLog.activityLogDo.UseDB(db, opts...)
	_activityLog.activityLogDo.UseModel(&model.ActivityLog{})

	tableName := _activityLog.activityLogDo.TableName()
	_activityLog.ALL = field.NewAsterisk(tableName)
	_activityLog.ID = field.NewInt32(tableName, "id")
	_activityLog.ActivityLogID = field.NewString(tableName, "activity_log_id")
	_activityLog.Message = field.NewString(tableName, "message")
	_activityLog.Status = field.NewString(tableName, "status")
	_activityLog.CreatedBy = field.NewString(tableName, "created_by")
	_activityLog.CreatedAt = field.NewTime(tableName, "created_at")
	_activityLog.UpdatedBy = field.NewString(tableName, "updated_by")
	_activityLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_activityLog.DeletedBy = field.NewString(tableName, "deleted_by")
	_activityLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_activityLog.fillFieldMap()

	return _activityLog
}

type activityLog struct {
	activityLogDo activityLogDo

	ALL           field.Asterisk
	ID            field.Int32
	ActivityLogID field.String
	Message       field.String
	Status        field.String
	CreatedBy     field.String
	CreatedAt     field.Time
	UpdatedBy     field.String
	UpdatedAt     field.Time
	DeletedBy     field.String
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (a activityLog) Table(newTableName string) *activityLog {
	a.activityLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityLog) As(alias string) *activityLog {
	a.activityLogDo.DO = *(a.activityLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityLog) updateTableName(table string) *activityLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.ActivityLogID = field.NewString(table, "activity_log_id")
	a.Message = field.NewString(table, "message")
	a.Status = field.NewString(table, "status")
	a.CreatedBy = field.NewString(table, "created_by")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedBy = field.NewString(table, "updated_by")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedBy = field.NewString(table, "deleted_by")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *activityLog) WithContext(ctx context.Context) IActivityLogDo {
	return a.activityLogDo.WithContext(ctx)
}

func (a activityLog) TableName() string { return a.activityLogDo.TableName() }

func (a activityLog) Alias() string { return a.activityLogDo.Alias() }

func (a activityLog) Columns(cols ...field.Expr) gen.Columns { return a.activityLogDo.Columns(cols...) }

func (a *activityLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_log_id"] = a.ActivityLogID
	a.fieldMap["message"] = a.Message
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_by"] = a.UpdatedBy
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_by"] = a.DeletedBy
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a activityLog) clone(db *gorm.DB) activityLog {
	a.activityLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityLog) replaceDB(db *gorm.DB) activityLog {
	a.activityLogDo.ReplaceDB(db)
	return a
}

type activityLogDo struct{ gen.DO }

type IActivityLogDo interface {
	gen.SubQuery
	Debug() IActivityLogDo
	WithContext(ctx context.Context) IActivityLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActivityLogDo
	WriteDB() IActivityLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActivityLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActivityLogDo
	Not(conds ...gen.Condition) IActivityLogDo
	Or(conds ...gen.Condition) IActivityLogDo
	Select(conds ...field.Expr) IActivityLogDo
	Where(conds ...gen.Condition) IActivityLogDo
	Order(conds ...field.Expr) IActivityLogDo
	Distinct(cols ...field.Expr) IActivityLogDo
	Omit(cols ...field.Expr) IActivityLogDo
	Join(table schema.Tabler, on ...field.Expr) IActivityLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActivityLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActivityLogDo
	Group(cols ...field.Expr) IActivityLogDo
	Having(conds ...gen.Condition) IActivityLogDo
	Limit(limit int) IActivityLogDo
	Offset(offset int) IActivityLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityLogDo
	Unscoped() IActivityLogDo
	Create(values ...*model.ActivityLog) error
	CreateInBatches(values []*model.ActivityLog, batchSize int) error
	Save(values ...*model.ActivityLog) error
	First() (*model.ActivityLog, error)
	Take() (*model.ActivityLog, error)
	Last() (*model.ActivityLog, error)
	Find() ([]*model.ActivityLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityLog, err error)
	FindInBatches(result *[]*model.ActivityLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ActivityLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActivityLogDo
	Assign(attrs ...field.AssignExpr) IActivityLogDo
	Joins(fields ...field.RelationField) IActivityLogDo
	Preload(fields ...field.RelationField) IActivityLogDo
	FirstOrInit() (*model.ActivityLog, error)
	FirstOrCreate() (*model.ActivityLog, error)
	FindByPage(offset int, limit int) (result []*model.ActivityLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActivityLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a activityLogDo) Debug() IActivityLogDo {
	return a.withDO(a.DO.Debug())
}

func (a activityLogDo) WithContext(ctx context.Context) IActivityLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityLogDo) ReadDB() IActivityLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityLogDo) WriteDB() IActivityLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityLogDo) Session(config *gorm.Session) IActivityLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityLogDo) Clauses(conds ...clause.Expression) IActivityLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityLogDo) Returning(value interface{}, columns ...string) IActivityLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityLogDo) Not(conds ...gen.Condition) IActivityLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityLogDo) Or(conds ...gen.Condition) IActivityLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityLogDo) Select(conds ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityLogDo) Where(conds ...gen.Condition) IActivityLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityLogDo) Order(conds ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityLogDo) Distinct(cols ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityLogDo) Omit(cols ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityLogDo) Join(table schema.Tabler, on ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityLogDo) Group(cols ...field.Expr) IActivityLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityLogDo) Having(conds ...gen.Condition) IActivityLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityLogDo) Limit(limit int) IActivityLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityLogDo) Offset(offset int) IActivityLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActivityLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityLogDo) Unscoped() IActivityLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityLogDo) Create(values ...*model.ActivityLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityLogDo) CreateInBatches(values []*model.ActivityLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityLogDo) Save(values ...*model.ActivityLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityLogDo) First() (*model.ActivityLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLog), nil
	}
}

func (a activityLogDo) Take() (*model.ActivityLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLog), nil
	}
}

func (a activityLogDo) Last() (*model.ActivityLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLog), nil
	}
}

func (a activityLogDo) Find() ([]*model.ActivityLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityLog), err
}

func (a activityLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityLog, err error) {
	buf := make([]*model.ActivityLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityLogDo) FindInBatches(result *[]*model.ActivityLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityLogDo) Attrs(attrs ...field.AssignExpr) IActivityLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityLogDo) Assign(attrs ...field.AssignExpr) IActivityLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityLogDo) Joins(fields ...field.RelationField) IActivityLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityLogDo) Preload(fields ...field.RelationField) IActivityLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityLogDo) FirstOrInit() (*model.ActivityLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLog), nil
	}
}

func (a activityLogDo) FirstOrCreate() (*model.ActivityLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLog), nil
	}
}

func (a activityLogDo) FindByPage(offset int, limit int) (result []*model.ActivityLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityLogDo) Delete(models ...*model.ActivityLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityLogDo) withDO(do gen.Dao) *activityLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
