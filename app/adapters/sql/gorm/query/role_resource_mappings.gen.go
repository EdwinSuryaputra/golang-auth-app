// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/adapters/sql/gorm/model"
)

func newRoleResourceMapping(db *gorm.DB, opts ...gen.DOOption) roleResourceMapping {
	_roleResourceMapping := roleResourceMapping{}

	_roleResourceMapping.roleResourceMappingDo.UseDB(db, opts...)
	_roleResourceMapping.roleResourceMappingDo.UseModel(&model.RoleResourceMapping{})

	tableName := _roleResourceMapping.roleResourceMappingDo.TableName()
	_roleResourceMapping.ALL = field.NewAsterisk(tableName)
	_roleResourceMapping.ID = field.NewInt32(tableName, "id")
	_roleResourceMapping.RoleID = field.NewInt32(tableName, "role_id")
	_roleResourceMapping.ResourceID = field.NewInt32(tableName, "resource_id")
	_roleResourceMapping.CreatedBy = field.NewString(tableName, "created_by")
	_roleResourceMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_roleResourceMapping.UpdatedBy = field.NewString(tableName, "updated_by")
	_roleResourceMapping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roleResourceMapping.DeletedBy = field.NewString(tableName, "deleted_by")
	_roleResourceMapping.DeletedAt = field.NewField(tableName, "deleted_at")

	_roleResourceMapping.fillFieldMap()

	return _roleResourceMapping
}

type roleResourceMapping struct {
	roleResourceMappingDo roleResourceMappingDo

	ALL        field.Asterisk
	ID         field.Int32
	RoleID     field.Int32
	ResourceID field.Int32
	CreatedBy  field.String
	CreatedAt  field.Time
	UpdatedBy  field.String
	UpdatedAt  field.Time
	DeletedBy  field.String
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (r roleResourceMapping) Table(newTableName string) *roleResourceMapping {
	r.roleResourceMappingDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleResourceMapping) As(alias string) *roleResourceMapping {
	r.roleResourceMappingDo.DO = *(r.roleResourceMappingDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleResourceMapping) updateTableName(table string) *roleResourceMapping {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.RoleID = field.NewInt32(table, "role_id")
	r.ResourceID = field.NewInt32(table, "resource_id")
	r.CreatedBy = field.NewString(table, "created_by")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedBy = field.NewString(table, "updated_by")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedBy = field.NewString(table, "deleted_by")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *roleResourceMapping) WithContext(ctx context.Context) IRoleResourceMappingDo {
	return r.roleResourceMappingDo.WithContext(ctx)
}

func (r roleResourceMapping) TableName() string { return r.roleResourceMappingDo.TableName() }

func (r roleResourceMapping) Alias() string { return r.roleResourceMappingDo.Alias() }

func (r roleResourceMapping) Columns(cols ...field.Expr) gen.Columns {
	return r.roleResourceMappingDo.Columns(cols...)
}

func (r *roleResourceMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleResourceMapping) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["resource_id"] = r.ResourceID
	r.fieldMap["created_by"] = r.CreatedBy
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_by"] = r.UpdatedBy
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_by"] = r.DeletedBy
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r roleResourceMapping) clone(db *gorm.DB) roleResourceMapping {
	r.roleResourceMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleResourceMapping) replaceDB(db *gorm.DB) roleResourceMapping {
	r.roleResourceMappingDo.ReplaceDB(db)
	return r
}

type roleResourceMappingDo struct{ gen.DO }

type IRoleResourceMappingDo interface {
	gen.SubQuery
	Debug() IRoleResourceMappingDo
	WithContext(ctx context.Context) IRoleResourceMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleResourceMappingDo
	WriteDB() IRoleResourceMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleResourceMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleResourceMappingDo
	Not(conds ...gen.Condition) IRoleResourceMappingDo
	Or(conds ...gen.Condition) IRoleResourceMappingDo
	Select(conds ...field.Expr) IRoleResourceMappingDo
	Where(conds ...gen.Condition) IRoleResourceMappingDo
	Order(conds ...field.Expr) IRoleResourceMappingDo
	Distinct(cols ...field.Expr) IRoleResourceMappingDo
	Omit(cols ...field.Expr) IRoleResourceMappingDo
	Join(table schema.Tabler, on ...field.Expr) IRoleResourceMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleResourceMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleResourceMappingDo
	Group(cols ...field.Expr) IRoleResourceMappingDo
	Having(conds ...gen.Condition) IRoleResourceMappingDo
	Limit(limit int) IRoleResourceMappingDo
	Offset(offset int) IRoleResourceMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleResourceMappingDo
	Unscoped() IRoleResourceMappingDo
	Create(values ...*model.RoleResourceMapping) error
	CreateInBatches(values []*model.RoleResourceMapping, batchSize int) error
	Save(values ...*model.RoleResourceMapping) error
	First() (*model.RoleResourceMapping, error)
	Take() (*model.RoleResourceMapping, error)
	Last() (*model.RoleResourceMapping, error)
	Find() ([]*model.RoleResourceMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleResourceMapping, err error)
	FindInBatches(result *[]*model.RoleResourceMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoleResourceMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleResourceMappingDo
	Assign(attrs ...field.AssignExpr) IRoleResourceMappingDo
	Joins(fields ...field.RelationField) IRoleResourceMappingDo
	Preload(fields ...field.RelationField) IRoleResourceMappingDo
	FirstOrInit() (*model.RoleResourceMapping, error)
	FirstOrCreate() (*model.RoleResourceMapping, error)
	FindByPage(offset int, limit int) (result []*model.RoleResourceMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleResourceMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roleResourceMappingDo) Debug() IRoleResourceMappingDo {
	return r.withDO(r.DO.Debug())
}

func (r roleResourceMappingDo) WithContext(ctx context.Context) IRoleResourceMappingDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleResourceMappingDo) ReadDB() IRoleResourceMappingDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleResourceMappingDo) WriteDB() IRoleResourceMappingDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleResourceMappingDo) Session(config *gorm.Session) IRoleResourceMappingDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleResourceMappingDo) Clauses(conds ...clause.Expression) IRoleResourceMappingDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleResourceMappingDo) Returning(value interface{}, columns ...string) IRoleResourceMappingDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleResourceMappingDo) Not(conds ...gen.Condition) IRoleResourceMappingDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleResourceMappingDo) Or(conds ...gen.Condition) IRoleResourceMappingDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleResourceMappingDo) Select(conds ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleResourceMappingDo) Where(conds ...gen.Condition) IRoleResourceMappingDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleResourceMappingDo) Order(conds ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleResourceMappingDo) Distinct(cols ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleResourceMappingDo) Omit(cols ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleResourceMappingDo) Join(table schema.Tabler, on ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleResourceMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleResourceMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleResourceMappingDo) Group(cols ...field.Expr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleResourceMappingDo) Having(conds ...gen.Condition) IRoleResourceMappingDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleResourceMappingDo) Limit(limit int) IRoleResourceMappingDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleResourceMappingDo) Offset(offset int) IRoleResourceMappingDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleResourceMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleResourceMappingDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleResourceMappingDo) Unscoped() IRoleResourceMappingDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleResourceMappingDo) Create(values ...*model.RoleResourceMapping) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleResourceMappingDo) CreateInBatches(values []*model.RoleResourceMapping, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleResourceMappingDo) Save(values ...*model.RoleResourceMapping) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleResourceMappingDo) First() (*model.RoleResourceMapping, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResourceMapping), nil
	}
}

func (r roleResourceMappingDo) Take() (*model.RoleResourceMapping, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResourceMapping), nil
	}
}

func (r roleResourceMappingDo) Last() (*model.RoleResourceMapping, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResourceMapping), nil
	}
}

func (r roleResourceMappingDo) Find() ([]*model.RoleResourceMapping, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleResourceMapping), err
}

func (r roleResourceMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleResourceMapping, err error) {
	buf := make([]*model.RoleResourceMapping, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleResourceMappingDo) FindInBatches(result *[]*model.RoleResourceMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleResourceMappingDo) Attrs(attrs ...field.AssignExpr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleResourceMappingDo) Assign(attrs ...field.AssignExpr) IRoleResourceMappingDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleResourceMappingDo) Joins(fields ...field.RelationField) IRoleResourceMappingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleResourceMappingDo) Preload(fields ...field.RelationField) IRoleResourceMappingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleResourceMappingDo) FirstOrInit() (*model.RoleResourceMapping, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResourceMapping), nil
	}
}

func (r roleResourceMappingDo) FirstOrCreate() (*model.RoleResourceMapping, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleResourceMapping), nil
	}
}

func (r roleResourceMappingDo) FindByPage(offset int, limit int) (result []*model.RoleResourceMapping, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleResourceMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleResourceMappingDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleResourceMappingDo) Delete(models ...*model.RoleResourceMapping) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleResourceMappingDo) withDO(do gen.Dao) *roleResourceMappingDo {
	r.DO = *do.(*gen.DO)
	return r
}
