// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	ActivityLog         *activityLog
	Application         *application
	Function            *function
	Menu                *menu
	Resource            *resource
	Role                *role
	RoleResourceMapping *roleResourceMapping
	SchemaMigration     *schemaMigration
	Submenu             *submenu
	TempRole            *tempRole
	TempUser            *tempUser
	User                *user
	UserRoleMapping     *userRoleMapping
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ActivityLog = &Q.ActivityLog
	Application = &Q.Application
	Function = &Q.Function
	Menu = &Q.Menu
	Resource = &Q.Resource
	Role = &Q.Role
	RoleResourceMapping = &Q.RoleResourceMapping
	SchemaMigration = &Q.SchemaMigration
	Submenu = &Q.Submenu
	TempRole = &Q.TempRole
	TempUser = &Q.TempUser
	User = &Q.User
	UserRoleMapping = &Q.UserRoleMapping
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		ActivityLog:         newActivityLog(db, opts...),
		Application:         newApplication(db, opts...),
		Function:            newFunction(db, opts...),
		Menu:                newMenu(db, opts...),
		Resource:            newResource(db, opts...),
		Role:                newRole(db, opts...),
		RoleResourceMapping: newRoleResourceMapping(db, opts...),
		SchemaMigration:     newSchemaMigration(db, opts...),
		Submenu:             newSubmenu(db, opts...),
		TempRole:            newTempRole(db, opts...),
		TempUser:            newTempUser(db, opts...),
		User:                newUser(db, opts...),
		UserRoleMapping:     newUserRoleMapping(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActivityLog         activityLog
	Application         application
	Function            function
	Menu                menu
	Resource            resource
	Role                role
	RoleResourceMapping roleResourceMapping
	SchemaMigration     schemaMigration
	Submenu             submenu
	TempRole            tempRole
	TempUser            tempUser
	User                user
	UserRoleMapping     userRoleMapping
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		ActivityLog:         q.ActivityLog.clone(db),
		Application:         q.Application.clone(db),
		Function:            q.Function.clone(db),
		Menu:                q.Menu.clone(db),
		Resource:            q.Resource.clone(db),
		Role:                q.Role.clone(db),
		RoleResourceMapping: q.RoleResourceMapping.clone(db),
		SchemaMigration:     q.SchemaMigration.clone(db),
		Submenu:             q.Submenu.clone(db),
		TempRole:            q.TempRole.clone(db),
		TempUser:            q.TempUser.clone(db),
		User:                q.User.clone(db),
		UserRoleMapping:     q.UserRoleMapping.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		ActivityLog:         q.ActivityLog.replaceDB(db),
		Application:         q.Application.replaceDB(db),
		Function:            q.Function.replaceDB(db),
		Menu:                q.Menu.replaceDB(db),
		Resource:            q.Resource.replaceDB(db),
		Role:                q.Role.replaceDB(db),
		RoleResourceMapping: q.RoleResourceMapping.replaceDB(db),
		SchemaMigration:     q.SchemaMigration.replaceDB(db),
		Submenu:             q.Submenu.replaceDB(db),
		TempRole:            q.TempRole.replaceDB(db),
		TempUser:            q.TempUser.replaceDB(db),
		User:                q.User.replaceDB(db),
		UserRoleMapping:     q.UserRoleMapping.replaceDB(db),
	}
}

type queryCtx struct {
	ActivityLog         IActivityLogDo
	Application         IApplicationDo
	Function            IFunctionDo
	Menu                IMenuDo
	Resource            IResourceDo
	Role                IRoleDo
	RoleResourceMapping IRoleResourceMappingDo
	SchemaMigration     ISchemaMigrationDo
	Submenu             ISubmenuDo
	TempRole            ITempRoleDo
	TempUser            ITempUserDo
	User                IUserDo
	UserRoleMapping     IUserRoleMappingDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ActivityLog:         q.ActivityLog.WithContext(ctx),
		Application:         q.Application.WithContext(ctx),
		Function:            q.Function.WithContext(ctx),
		Menu:                q.Menu.WithContext(ctx),
		Resource:            q.Resource.WithContext(ctx),
		Role:                q.Role.WithContext(ctx),
		RoleResourceMapping: q.RoleResourceMapping.WithContext(ctx),
		SchemaMigration:     q.SchemaMigration.WithContext(ctx),
		Submenu:             q.Submenu.WithContext(ctx),
		TempRole:            q.TempRole.WithContext(ctx),
		TempUser:            q.TempUser.WithContext(ctx),
		User:                q.User.WithContext(ctx),
		UserRoleMapping:     q.UserRoleMapping.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
