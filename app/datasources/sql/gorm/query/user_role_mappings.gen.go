// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/datasources/sql/gorm/model"
)

func newUserRoleMapping(db *gorm.DB, opts ...gen.DOOption) userRoleMapping {
	_userRoleMapping := userRoleMapping{}

	_userRoleMapping.userRoleMappingDo.UseDB(db, opts...)
	_userRoleMapping.userRoleMappingDo.UseModel(&model.UserRoleMapping{})

	tableName := _userRoleMapping.userRoleMappingDo.TableName()
	_userRoleMapping.ALL = field.NewAsterisk(tableName)
	_userRoleMapping.ID = field.NewInt32(tableName, "id")
	_userRoleMapping.UserID = field.NewInt32(tableName, "user_id")
	_userRoleMapping.RoleID = field.NewInt32(tableName, "role_id")
	_userRoleMapping.CreatedBy = field.NewString(tableName, "created_by")
	_userRoleMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_userRoleMapping.UpdatedBy = field.NewString(tableName, "updated_by")
	_userRoleMapping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userRoleMapping.DeletedBy = field.NewString(tableName, "deleted_by")
	_userRoleMapping.DeletedAt = field.NewField(tableName, "deleted_at")

	_userRoleMapping.fillFieldMap()

	return _userRoleMapping
}

type userRoleMapping struct {
	userRoleMappingDo userRoleMappingDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32
	RoleID    field.Int32
	CreatedBy field.String
	CreatedAt field.Time
	UpdatedBy field.String
	UpdatedAt field.Time
	DeletedBy field.String
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userRoleMapping) Table(newTableName string) *userRoleMapping {
	u.userRoleMappingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoleMapping) As(alias string) *userRoleMapping {
	u.userRoleMappingDo.DO = *(u.userRoleMappingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoleMapping) updateTableName(table string) *userRoleMapping {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.RoleID = field.NewInt32(table, "role_id")
	u.CreatedBy = field.NewString(table, "created_by")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedBy = field.NewString(table, "updated_by")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedBy = field.NewString(table, "deleted_by")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userRoleMapping) WithContext(ctx context.Context) IUserRoleMappingDo {
	return u.userRoleMappingDo.WithContext(ctx)
}

func (u userRoleMapping) TableName() string { return u.userRoleMappingDo.TableName() }

func (u userRoleMapping) Alias() string { return u.userRoleMappingDo.Alias() }

func (u userRoleMapping) Columns(cols ...field.Expr) gen.Columns {
	return u.userRoleMappingDo.Columns(cols...)
}

func (u *userRoleMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoleMapping) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_by"] = u.UpdatedBy
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_by"] = u.DeletedBy
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userRoleMapping) clone(db *gorm.DB) userRoleMapping {
	u.userRoleMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoleMapping) replaceDB(db *gorm.DB) userRoleMapping {
	u.userRoleMappingDo.ReplaceDB(db)
	return u
}

type userRoleMappingDo struct{ gen.DO }

type IUserRoleMappingDo interface {
	gen.SubQuery
	Debug() IUserRoleMappingDo
	WithContext(ctx context.Context) IUserRoleMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRoleMappingDo
	WriteDB() IUserRoleMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRoleMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRoleMappingDo
	Not(conds ...gen.Condition) IUserRoleMappingDo
	Or(conds ...gen.Condition) IUserRoleMappingDo
	Select(conds ...field.Expr) IUserRoleMappingDo
	Where(conds ...gen.Condition) IUserRoleMappingDo
	Order(conds ...field.Expr) IUserRoleMappingDo
	Distinct(cols ...field.Expr) IUserRoleMappingDo
	Omit(cols ...field.Expr) IUserRoleMappingDo
	Join(table schema.Tabler, on ...field.Expr) IUserRoleMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleMappingDo
	Group(cols ...field.Expr) IUserRoleMappingDo
	Having(conds ...gen.Condition) IUserRoleMappingDo
	Limit(limit int) IUserRoleMappingDo
	Offset(offset int) IUserRoleMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleMappingDo
	Unscoped() IUserRoleMappingDo
	Create(values ...*model.UserRoleMapping) error
	CreateInBatches(values []*model.UserRoleMapping, batchSize int) error
	Save(values ...*model.UserRoleMapping) error
	First() (*model.UserRoleMapping, error)
	Take() (*model.UserRoleMapping, error)
	Last() (*model.UserRoleMapping, error)
	Find() ([]*model.UserRoleMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleMapping, err error)
	FindInBatches(result *[]*model.UserRoleMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRoleMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRoleMappingDo
	Assign(attrs ...field.AssignExpr) IUserRoleMappingDo
	Joins(fields ...field.RelationField) IUserRoleMappingDo
	Preload(fields ...field.RelationField) IUserRoleMappingDo
	FirstOrInit() (*model.UserRoleMapping, error)
	FirstOrCreate() (*model.UserRoleMapping, error)
	FindByPage(offset int, limit int) (result []*model.UserRoleMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRoleMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRoleMappingDo) Debug() IUserRoleMappingDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoleMappingDo) WithContext(ctx context.Context) IUserRoleMappingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoleMappingDo) ReadDB() IUserRoleMappingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoleMappingDo) WriteDB() IUserRoleMappingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoleMappingDo) Session(config *gorm.Session) IUserRoleMappingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoleMappingDo) Clauses(conds ...clause.Expression) IUserRoleMappingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoleMappingDo) Returning(value interface{}, columns ...string) IUserRoleMappingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoleMappingDo) Not(conds ...gen.Condition) IUserRoleMappingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoleMappingDo) Or(conds ...gen.Condition) IUserRoleMappingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoleMappingDo) Select(conds ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoleMappingDo) Where(conds ...gen.Condition) IUserRoleMappingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoleMappingDo) Order(conds ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoleMappingDo) Distinct(cols ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoleMappingDo) Omit(cols ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoleMappingDo) Join(table schema.Tabler, on ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoleMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoleMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoleMappingDo) Group(cols ...field.Expr) IUserRoleMappingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoleMappingDo) Having(conds ...gen.Condition) IUserRoleMappingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoleMappingDo) Limit(limit int) IUserRoleMappingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoleMappingDo) Offset(offset int) IUserRoleMappingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoleMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleMappingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoleMappingDo) Unscoped() IUserRoleMappingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoleMappingDo) Create(values ...*model.UserRoleMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoleMappingDo) CreateInBatches(values []*model.UserRoleMapping, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoleMappingDo) Save(values ...*model.UserRoleMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoleMappingDo) First() (*model.UserRoleMapping, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMapping), nil
	}
}

func (u userRoleMappingDo) Take() (*model.UserRoleMapping, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMapping), nil
	}
}

func (u userRoleMappingDo) Last() (*model.UserRoleMapping, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMapping), nil
	}
}

func (u userRoleMappingDo) Find() ([]*model.UserRoleMapping, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRoleMapping), err
}

func (u userRoleMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleMapping, err error) {
	buf := make([]*model.UserRoleMapping, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoleMappingDo) FindInBatches(result *[]*model.UserRoleMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoleMappingDo) Attrs(attrs ...field.AssignExpr) IUserRoleMappingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoleMappingDo) Assign(attrs ...field.AssignExpr) IUserRoleMappingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoleMappingDo) Joins(fields ...field.RelationField) IUserRoleMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoleMappingDo) Preload(fields ...field.RelationField) IUserRoleMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoleMappingDo) FirstOrInit() (*model.UserRoleMapping, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMapping), nil
	}
}

func (u userRoleMappingDo) FirstOrCreate() (*model.UserRoleMapping, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMapping), nil
	}
}

func (u userRoleMappingDo) FindByPage(offset int, limit int) (result []*model.UserRoleMapping, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoleMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoleMappingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoleMappingDo) Delete(models ...*model.UserRoleMapping) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoleMappingDo) withDO(do gen.Dao) *userRoleMappingDo {
	u.DO = *do.(*gen.DO)
	return u
}
