// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/datasources/sql/gorm/model"
)

func newTempRoleResourceMapping(db *gorm.DB, opts ...gen.DOOption) tempRoleResourceMapping {
	_tempRoleResourceMapping := tempRoleResourceMapping{}

	_tempRoleResourceMapping.tempRoleResourceMappingDo.UseDB(db, opts...)
	_tempRoleResourceMapping.tempRoleResourceMappingDo.UseModel(&model.TempRoleResourceMapping{})

	tableName := _tempRoleResourceMapping.tempRoleResourceMappingDo.TableName()
	_tempRoleResourceMapping.ALL = field.NewAsterisk(tableName)
	_tempRoleResourceMapping.ID = field.NewInt32(tableName, "id")
	_tempRoleResourceMapping.RoleID = field.NewInt32(tableName, "role_id")
	_tempRoleResourceMapping.MenuID = field.NewInt32(tableName, "menu_id")
	_tempRoleResourceMapping.SubmenuID = field.NewInt32(tableName, "submenu_id")
	_tempRoleResourceMapping.FunctionID = field.NewInt32(tableName, "function_id")
	_tempRoleResourceMapping.CreatedBy = field.NewString(tableName, "created_by")
	_tempRoleResourceMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_tempRoleResourceMapping.UpdatedBy = field.NewString(tableName, "updated_by")
	_tempRoleResourceMapping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tempRoleResourceMapping.DeletedBy = field.NewString(tableName, "deleted_by")
	_tempRoleResourceMapping.DeletedAt = field.NewField(tableName, "deleted_at")

	_tempRoleResourceMapping.fillFieldMap()

	return _tempRoleResourceMapping
}

type tempRoleResourceMapping struct {
	tempRoleResourceMappingDo tempRoleResourceMappingDo

	ALL        field.Asterisk
	ID         field.Int32
	RoleID     field.Int32
	MenuID     field.Int32
	SubmenuID  field.Int32
	FunctionID field.Int32
	CreatedBy  field.String
	CreatedAt  field.Time
	UpdatedBy  field.String
	UpdatedAt  field.Time
	DeletedBy  field.String
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (t tempRoleResourceMapping) Table(newTableName string) *tempRoleResourceMapping {
	t.tempRoleResourceMappingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempRoleResourceMapping) As(alias string) *tempRoleResourceMapping {
	t.tempRoleResourceMappingDo.DO = *(t.tempRoleResourceMappingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempRoleResourceMapping) updateTableName(table string) *tempRoleResourceMapping {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.RoleID = field.NewInt32(table, "role_id")
	t.MenuID = field.NewInt32(table, "menu_id")
	t.SubmenuID = field.NewInt32(table, "submenu_id")
	t.FunctionID = field.NewInt32(table, "function_id")
	t.CreatedBy = field.NewString(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedBy = field.NewString(table, "deleted_by")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tempRoleResourceMapping) WithContext(ctx context.Context) ITempRoleResourceMappingDo {
	return t.tempRoleResourceMappingDo.WithContext(ctx)
}

func (t tempRoleResourceMapping) TableName() string { return t.tempRoleResourceMappingDo.TableName() }

func (t tempRoleResourceMapping) Alias() string { return t.tempRoleResourceMappingDo.Alias() }

func (t tempRoleResourceMapping) Columns(cols ...field.Expr) gen.Columns {
	return t.tempRoleResourceMappingDo.Columns(cols...)
}

func (t *tempRoleResourceMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempRoleResourceMapping) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["role_id"] = t.RoleID
	t.fieldMap["menu_id"] = t.MenuID
	t.fieldMap["submenu_id"] = t.SubmenuID
	t.fieldMap["function_id"] = t.FunctionID
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_by"] = t.DeletedBy
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tempRoleResourceMapping) clone(db *gorm.DB) tempRoleResourceMapping {
	t.tempRoleResourceMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempRoleResourceMapping) replaceDB(db *gorm.DB) tempRoleResourceMapping {
	t.tempRoleResourceMappingDo.ReplaceDB(db)
	return t
}

type tempRoleResourceMappingDo struct{ gen.DO }

type ITempRoleResourceMappingDo interface {
	gen.SubQuery
	Debug() ITempRoleResourceMappingDo
	WithContext(ctx context.Context) ITempRoleResourceMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempRoleResourceMappingDo
	WriteDB() ITempRoleResourceMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempRoleResourceMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempRoleResourceMappingDo
	Not(conds ...gen.Condition) ITempRoleResourceMappingDo
	Or(conds ...gen.Condition) ITempRoleResourceMappingDo
	Select(conds ...field.Expr) ITempRoleResourceMappingDo
	Where(conds ...gen.Condition) ITempRoleResourceMappingDo
	Order(conds ...field.Expr) ITempRoleResourceMappingDo
	Distinct(cols ...field.Expr) ITempRoleResourceMappingDo
	Omit(cols ...field.Expr) ITempRoleResourceMappingDo
	Join(table schema.Tabler, on ...field.Expr) ITempRoleResourceMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempRoleResourceMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempRoleResourceMappingDo
	Group(cols ...field.Expr) ITempRoleResourceMappingDo
	Having(conds ...gen.Condition) ITempRoleResourceMappingDo
	Limit(limit int) ITempRoleResourceMappingDo
	Offset(offset int) ITempRoleResourceMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempRoleResourceMappingDo
	Unscoped() ITempRoleResourceMappingDo
	Create(values ...*model.TempRoleResourceMapping) error
	CreateInBatches(values []*model.TempRoleResourceMapping, batchSize int) error
	Save(values ...*model.TempRoleResourceMapping) error
	First() (*model.TempRoleResourceMapping, error)
	Take() (*model.TempRoleResourceMapping, error)
	Last() (*model.TempRoleResourceMapping, error)
	Find() ([]*model.TempRoleResourceMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TempRoleResourceMapping, err error)
	FindInBatches(result *[]*model.TempRoleResourceMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TempRoleResourceMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempRoleResourceMappingDo
	Assign(attrs ...field.AssignExpr) ITempRoleResourceMappingDo
	Joins(fields ...field.RelationField) ITempRoleResourceMappingDo
	Preload(fields ...field.RelationField) ITempRoleResourceMappingDo
	FirstOrInit() (*model.TempRoleResourceMapping, error)
	FirstOrCreate() (*model.TempRoleResourceMapping, error)
	FindByPage(offset int, limit int) (result []*model.TempRoleResourceMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempRoleResourceMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempRoleResourceMappingDo) Debug() ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Debug())
}

func (t tempRoleResourceMappingDo) WithContext(ctx context.Context) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempRoleResourceMappingDo) ReadDB() ITempRoleResourceMappingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempRoleResourceMappingDo) WriteDB() ITempRoleResourceMappingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempRoleResourceMappingDo) Session(config *gorm.Session) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempRoleResourceMappingDo) Clauses(conds ...clause.Expression) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempRoleResourceMappingDo) Returning(value interface{}, columns ...string) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempRoleResourceMappingDo) Not(conds ...gen.Condition) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempRoleResourceMappingDo) Or(conds ...gen.Condition) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempRoleResourceMappingDo) Select(conds ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempRoleResourceMappingDo) Where(conds ...gen.Condition) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempRoleResourceMappingDo) Order(conds ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempRoleResourceMappingDo) Distinct(cols ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempRoleResourceMappingDo) Omit(cols ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempRoleResourceMappingDo) Join(table schema.Tabler, on ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempRoleResourceMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempRoleResourceMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempRoleResourceMappingDo) Group(cols ...field.Expr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempRoleResourceMappingDo) Having(conds ...gen.Condition) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempRoleResourceMappingDo) Limit(limit int) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempRoleResourceMappingDo) Offset(offset int) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempRoleResourceMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempRoleResourceMappingDo) Unscoped() ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempRoleResourceMappingDo) Create(values ...*model.TempRoleResourceMapping) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempRoleResourceMappingDo) CreateInBatches(values []*model.TempRoleResourceMapping, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempRoleResourceMappingDo) Save(values ...*model.TempRoleResourceMapping) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempRoleResourceMappingDo) First() (*model.TempRoleResourceMapping, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRoleResourceMapping), nil
	}
}

func (t tempRoleResourceMappingDo) Take() (*model.TempRoleResourceMapping, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRoleResourceMapping), nil
	}
}

func (t tempRoleResourceMappingDo) Last() (*model.TempRoleResourceMapping, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRoleResourceMapping), nil
	}
}

func (t tempRoleResourceMappingDo) Find() ([]*model.TempRoleResourceMapping, error) {
	result, err := t.DO.Find()
	return result.([]*model.TempRoleResourceMapping), err
}

func (t tempRoleResourceMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TempRoleResourceMapping, err error) {
	buf := make([]*model.TempRoleResourceMapping, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempRoleResourceMappingDo) FindInBatches(result *[]*model.TempRoleResourceMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempRoleResourceMappingDo) Attrs(attrs ...field.AssignExpr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempRoleResourceMappingDo) Assign(attrs ...field.AssignExpr) ITempRoleResourceMappingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempRoleResourceMappingDo) Joins(fields ...field.RelationField) ITempRoleResourceMappingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempRoleResourceMappingDo) Preload(fields ...field.RelationField) ITempRoleResourceMappingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempRoleResourceMappingDo) FirstOrInit() (*model.TempRoleResourceMapping, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRoleResourceMapping), nil
	}
}

func (t tempRoleResourceMappingDo) FirstOrCreate() (*model.TempRoleResourceMapping, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRoleResourceMapping), nil
	}
}

func (t tempRoleResourceMappingDo) FindByPage(offset int, limit int) (result []*model.TempRoleResourceMapping, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempRoleResourceMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempRoleResourceMappingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempRoleResourceMappingDo) Delete(models ...*model.TempRoleResourceMapping) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempRoleResourceMappingDo) withDO(do gen.Dao) *tempRoleResourceMappingDo {
	t.DO = *do.(*gen.DO)
	return t
}
