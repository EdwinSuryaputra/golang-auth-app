// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/datasources/sql/gorm/model"
)

func newTempRole(db *gorm.DB, opts ...gen.DOOption) tempRole {
	_tempRole := tempRole{}

	_tempRole.tempRoleDo.UseDB(db, opts...)
	_tempRole.tempRoleDo.UseModel(&model.TempRole{})

	tableName := _tempRole.tempRoleDo.TableName()
	_tempRole.ALL = field.NewAsterisk(tableName)
	_tempRole.ID = field.NewInt32(tableName, "id")
	_tempRole.RoleID = field.NewInt32(tableName, "role_id")
	_tempRole.Name = field.NewString(tableName, "name")
	_tempRole.Description = field.NewString(tableName, "description")
	_tempRole.Type = field.NewString(tableName, "type")
	_tempRole.InactiveDate = field.NewTime(tableName, "inactive_date")
	_tempRole.Resources = field.NewString(tableName, "resources")
	_tempRole.CreatedBy = field.NewString(tableName, "created_by")
	_tempRole.CreatedAt = field.NewTime(tableName, "created_at")
	_tempRole.UpdatedBy = field.NewString(tableName, "updated_by")
	_tempRole.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tempRole.DeletedBy = field.NewString(tableName, "deleted_by")
	_tempRole.DeletedAt = field.NewField(tableName, "deleted_at")

	_tempRole.fillFieldMap()

	return _tempRole
}

type tempRole struct {
	tempRoleDo tempRoleDo

	ALL          field.Asterisk
	ID           field.Int32
	RoleID       field.Int32
	Name         field.String
	Description  field.String
	Type         field.String
	InactiveDate field.Time
	Resources    field.String
	CreatedBy    field.String
	CreatedAt    field.Time
	UpdatedBy    field.String
	UpdatedAt    field.Time
	DeletedBy    field.String
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (t tempRole) Table(newTableName string) *tempRole {
	t.tempRoleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempRole) As(alias string) *tempRole {
	t.tempRoleDo.DO = *(t.tempRoleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempRole) updateTableName(table string) *tempRole {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.RoleID = field.NewInt32(table, "role_id")
	t.Name = field.NewString(table, "name")
	t.Description = field.NewString(table, "description")
	t.Type = field.NewString(table, "type")
	t.InactiveDate = field.NewTime(table, "inactive_date")
	t.Resources = field.NewString(table, "resources")
	t.CreatedBy = field.NewString(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedBy = field.NewString(table, "deleted_by")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tempRole) WithContext(ctx context.Context) ITempRoleDo { return t.tempRoleDo.WithContext(ctx) }

func (t tempRole) TableName() string { return t.tempRoleDo.TableName() }

func (t tempRole) Alias() string { return t.tempRoleDo.Alias() }

func (t tempRole) Columns(cols ...field.Expr) gen.Columns { return t.tempRoleDo.Columns(cols...) }

func (t *tempRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempRole) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["role_id"] = t.RoleID
	t.fieldMap["name"] = t.Name
	t.fieldMap["description"] = t.Description
	t.fieldMap["type"] = t.Type
	t.fieldMap["inactive_date"] = t.InactiveDate
	t.fieldMap["resources"] = t.Resources
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_by"] = t.DeletedBy
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tempRole) clone(db *gorm.DB) tempRole {
	t.tempRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempRole) replaceDB(db *gorm.DB) tempRole {
	t.tempRoleDo.ReplaceDB(db)
	return t
}

type tempRoleDo struct{ gen.DO }

type ITempRoleDo interface {
	gen.SubQuery
	Debug() ITempRoleDo
	WithContext(ctx context.Context) ITempRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempRoleDo
	WriteDB() ITempRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempRoleDo
	Not(conds ...gen.Condition) ITempRoleDo
	Or(conds ...gen.Condition) ITempRoleDo
	Select(conds ...field.Expr) ITempRoleDo
	Where(conds ...gen.Condition) ITempRoleDo
	Order(conds ...field.Expr) ITempRoleDo
	Distinct(cols ...field.Expr) ITempRoleDo
	Omit(cols ...field.Expr) ITempRoleDo
	Join(table schema.Tabler, on ...field.Expr) ITempRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempRoleDo
	Group(cols ...field.Expr) ITempRoleDo
	Having(conds ...gen.Condition) ITempRoleDo
	Limit(limit int) ITempRoleDo
	Offset(offset int) ITempRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempRoleDo
	Unscoped() ITempRoleDo
	Create(values ...*model.TempRole) error
	CreateInBatches(values []*model.TempRole, batchSize int) error
	Save(values ...*model.TempRole) error
	First() (*model.TempRole, error)
	Take() (*model.TempRole, error)
	Last() (*model.TempRole, error)
	Find() ([]*model.TempRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TempRole, err error)
	FindInBatches(result *[]*model.TempRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TempRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempRoleDo
	Assign(attrs ...field.AssignExpr) ITempRoleDo
	Joins(fields ...field.RelationField) ITempRoleDo
	Preload(fields ...field.RelationField) ITempRoleDo
	FirstOrInit() (*model.TempRole, error)
	FirstOrCreate() (*model.TempRole, error)
	FindByPage(offset int, limit int) (result []*model.TempRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempRoleDo) Debug() ITempRoleDo {
	return t.withDO(t.DO.Debug())
}

func (t tempRoleDo) WithContext(ctx context.Context) ITempRoleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempRoleDo) ReadDB() ITempRoleDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempRoleDo) WriteDB() ITempRoleDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempRoleDo) Session(config *gorm.Session) ITempRoleDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempRoleDo) Clauses(conds ...clause.Expression) ITempRoleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempRoleDo) Returning(value interface{}, columns ...string) ITempRoleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempRoleDo) Not(conds ...gen.Condition) ITempRoleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempRoleDo) Or(conds ...gen.Condition) ITempRoleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempRoleDo) Select(conds ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempRoleDo) Where(conds ...gen.Condition) ITempRoleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempRoleDo) Order(conds ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempRoleDo) Distinct(cols ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempRoleDo) Omit(cols ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempRoleDo) Join(table schema.Tabler, on ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempRoleDo) Group(cols ...field.Expr) ITempRoleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempRoleDo) Having(conds ...gen.Condition) ITempRoleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempRoleDo) Limit(limit int) ITempRoleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempRoleDo) Offset(offset int) ITempRoleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempRoleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempRoleDo) Unscoped() ITempRoleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempRoleDo) Create(values ...*model.TempRole) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempRoleDo) CreateInBatches(values []*model.TempRole, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempRoleDo) Save(values ...*model.TempRole) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempRoleDo) First() (*model.TempRole, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRole), nil
	}
}

func (t tempRoleDo) Take() (*model.TempRole, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRole), nil
	}
}

func (t tempRoleDo) Last() (*model.TempRole, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRole), nil
	}
}

func (t tempRoleDo) Find() ([]*model.TempRole, error) {
	result, err := t.DO.Find()
	return result.([]*model.TempRole), err
}

func (t tempRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TempRole, err error) {
	buf := make([]*model.TempRole, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempRoleDo) FindInBatches(result *[]*model.TempRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempRoleDo) Attrs(attrs ...field.AssignExpr) ITempRoleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempRoleDo) Assign(attrs ...field.AssignExpr) ITempRoleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempRoleDo) Joins(fields ...field.RelationField) ITempRoleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempRoleDo) Preload(fields ...field.RelationField) ITempRoleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempRoleDo) FirstOrInit() (*model.TempRole, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRole), nil
	}
}

func (t tempRoleDo) FirstOrCreate() (*model.TempRole, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempRole), nil
	}
}

func (t tempRoleDo) FindByPage(offset int, limit int) (result []*model.TempRole, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempRoleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempRoleDo) Delete(models ...*model.TempRole) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempRoleDo) withDO(do gen.Dao) *tempRoleDo {
	t.DO = *do.(*gen.DO)
	return t
}
