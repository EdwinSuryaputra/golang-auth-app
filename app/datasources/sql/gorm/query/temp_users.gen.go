// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/datasources/sql/gorm/model"
)

func newTempUser(db *gorm.DB, opts ...gen.DOOption) tempUser {
	_tempUser := tempUser{}

	_tempUser.tempUserDo.UseDB(db, opts...)
	_tempUser.tempUserDo.UseModel(&model.TempUser{})

	tableName := _tempUser.tempUserDo.TableName()
	_tempUser.ALL = field.NewAsterisk(tableName)
	_tempUser.ID = field.NewInt32(tableName, "id")
	_tempUser.UserID = field.NewInt32(tableName, "user_id")
	_tempUser.Username = field.NewString(tableName, "username")
	_tempUser.Description = field.NewString(tableName, "description")
	_tempUser.FullName = field.NewString(tableName, "full_name")
	_tempUser.Email = field.NewString(tableName, "email")
	_tempUser.PhoneNumber = field.NewString(tableName, "phone_number")
	_tempUser.BusinessUnitLevel = field.NewString(tableName, "business_unit_level")
	_tempUser.BusinessUnitLocationID = field.NewInt32(tableName, "business_unit_location_id")
	_tempUser.BusinessUnitLocation = field.NewString(tableName, "business_unit_location")
	_tempUser.BusinessUnitAssignmentStatus = field.NewString(tableName, "business_unit_assignment_status")
	_tempUser.SupplierID = field.NewInt32(tableName, "supplier_id")
	_tempUser.SupplierName = field.NewString(tableName, "supplier_name")
	_tempUser.AssignedRoles = field.NewString(tableName, "assigned_roles")
	_tempUser.CreatedBy = field.NewString(tableName, "created_by")
	_tempUser.CreatedAt = field.NewTime(tableName, "created_at")
	_tempUser.UpdatedBy = field.NewString(tableName, "updated_by")
	_tempUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tempUser.DeletedBy = field.NewString(tableName, "deleted_by")
	_tempUser.DeletedAt = field.NewField(tableName, "deleted_at")

	_tempUser.fillFieldMap()

	return _tempUser
}

type tempUser struct {
	tempUserDo tempUserDo

	ALL                          field.Asterisk
	ID                           field.Int32
	UserID                       field.Int32
	Username                     field.String
	Description                  field.String
	FullName                     field.String
	Email                        field.String
	PhoneNumber                  field.String
	BusinessUnitLevel            field.String
	BusinessUnitLocationID       field.Int32
	BusinessUnitLocation         field.String
	BusinessUnitAssignmentStatus field.String
	SupplierID                   field.Int32
	SupplierName                 field.String
	AssignedRoles                field.String
	CreatedBy                    field.String
	CreatedAt                    field.Time
	UpdatedBy                    field.String
	UpdatedAt                    field.Time
	DeletedBy                    field.String
	DeletedAt                    field.Field

	fieldMap map[string]field.Expr
}

func (t tempUser) Table(newTableName string) *tempUser {
	t.tempUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempUser) As(alias string) *tempUser {
	t.tempUserDo.DO = *(t.tempUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempUser) updateTableName(table string) *tempUser {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UserID = field.NewInt32(table, "user_id")
	t.Username = field.NewString(table, "username")
	t.Description = field.NewString(table, "description")
	t.FullName = field.NewString(table, "full_name")
	t.Email = field.NewString(table, "email")
	t.PhoneNumber = field.NewString(table, "phone_number")
	t.BusinessUnitLevel = field.NewString(table, "business_unit_level")
	t.BusinessUnitLocationID = field.NewInt32(table, "business_unit_location_id")
	t.BusinessUnitLocation = field.NewString(table, "business_unit_location")
	t.BusinessUnitAssignmentStatus = field.NewString(table, "business_unit_assignment_status")
	t.SupplierID = field.NewInt32(table, "supplier_id")
	t.SupplierName = field.NewString(table, "supplier_name")
	t.AssignedRoles = field.NewString(table, "assigned_roles")
	t.CreatedBy = field.NewString(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedBy = field.NewString(table, "deleted_by")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tempUser) WithContext(ctx context.Context) ITempUserDo { return t.tempUserDo.WithContext(ctx) }

func (t tempUser) TableName() string { return t.tempUserDo.TableName() }

func (t tempUser) Alias() string { return t.tempUserDo.Alias() }

func (t tempUser) Columns(cols ...field.Expr) gen.Columns { return t.tempUserDo.Columns(cols...) }

func (t *tempUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["username"] = t.Username
	t.fieldMap["description"] = t.Description
	t.fieldMap["full_name"] = t.FullName
	t.fieldMap["email"] = t.Email
	t.fieldMap["phone_number"] = t.PhoneNumber
	t.fieldMap["business_unit_level"] = t.BusinessUnitLevel
	t.fieldMap["business_unit_location_id"] = t.BusinessUnitLocationID
	t.fieldMap["business_unit_location"] = t.BusinessUnitLocation
	t.fieldMap["business_unit_assignment_status"] = t.BusinessUnitAssignmentStatus
	t.fieldMap["supplier_id"] = t.SupplierID
	t.fieldMap["supplier_name"] = t.SupplierName
	t.fieldMap["assigned_roles"] = t.AssignedRoles
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_by"] = t.DeletedBy
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tempUser) clone(db *gorm.DB) tempUser {
	t.tempUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempUser) replaceDB(db *gorm.DB) tempUser {
	t.tempUserDo.ReplaceDB(db)
	return t
}

type tempUserDo struct{ gen.DO }

type ITempUserDo interface {
	gen.SubQuery
	Debug() ITempUserDo
	WithContext(ctx context.Context) ITempUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempUserDo
	WriteDB() ITempUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempUserDo
	Not(conds ...gen.Condition) ITempUserDo
	Or(conds ...gen.Condition) ITempUserDo
	Select(conds ...field.Expr) ITempUserDo
	Where(conds ...gen.Condition) ITempUserDo
	Order(conds ...field.Expr) ITempUserDo
	Distinct(cols ...field.Expr) ITempUserDo
	Omit(cols ...field.Expr) ITempUserDo
	Join(table schema.Tabler, on ...field.Expr) ITempUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempUserDo
	Group(cols ...field.Expr) ITempUserDo
	Having(conds ...gen.Condition) ITempUserDo
	Limit(limit int) ITempUserDo
	Offset(offset int) ITempUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempUserDo
	Unscoped() ITempUserDo
	Create(values ...*model.TempUser) error
	CreateInBatches(values []*model.TempUser, batchSize int) error
	Save(values ...*model.TempUser) error
	First() (*model.TempUser, error)
	Take() (*model.TempUser, error)
	Last() (*model.TempUser, error)
	Find() ([]*model.TempUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TempUser, err error)
	FindInBatches(result *[]*model.TempUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TempUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempUserDo
	Assign(attrs ...field.AssignExpr) ITempUserDo
	Joins(fields ...field.RelationField) ITempUserDo
	Preload(fields ...field.RelationField) ITempUserDo
	FirstOrInit() (*model.TempUser, error)
	FirstOrCreate() (*model.TempUser, error)
	FindByPage(offset int, limit int) (result []*model.TempUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempUserDo) Debug() ITempUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tempUserDo) WithContext(ctx context.Context) ITempUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempUserDo) ReadDB() ITempUserDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempUserDo) WriteDB() ITempUserDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempUserDo) Session(config *gorm.Session) ITempUserDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempUserDo) Clauses(conds ...clause.Expression) ITempUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempUserDo) Returning(value interface{}, columns ...string) ITempUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempUserDo) Not(conds ...gen.Condition) ITempUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempUserDo) Or(conds ...gen.Condition) ITempUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempUserDo) Select(conds ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempUserDo) Where(conds ...gen.Condition) ITempUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempUserDo) Order(conds ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempUserDo) Distinct(cols ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempUserDo) Omit(cols ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempUserDo) Join(table schema.Tabler, on ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempUserDo) Group(cols ...field.Expr) ITempUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempUserDo) Having(conds ...gen.Condition) ITempUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempUserDo) Limit(limit int) ITempUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempUserDo) Offset(offset int) ITempUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempUserDo) Unscoped() ITempUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempUserDo) Create(values ...*model.TempUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempUserDo) CreateInBatches(values []*model.TempUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempUserDo) Save(values ...*model.TempUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempUserDo) First() (*model.TempUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempUser), nil
	}
}

func (t tempUserDo) Take() (*model.TempUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempUser), nil
	}
}

func (t tempUserDo) Last() (*model.TempUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempUser), nil
	}
}

func (t tempUserDo) Find() ([]*model.TempUser, error) {
	result, err := t.DO.Find()
	return result.([]*model.TempUser), err
}

func (t tempUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TempUser, err error) {
	buf := make([]*model.TempUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempUserDo) FindInBatches(result *[]*model.TempUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempUserDo) Attrs(attrs ...field.AssignExpr) ITempUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempUserDo) Assign(attrs ...field.AssignExpr) ITempUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempUserDo) Joins(fields ...field.RelationField) ITempUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempUserDo) Preload(fields ...field.RelationField) ITempUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempUserDo) FirstOrInit() (*model.TempUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempUser), nil
	}
}

func (t tempUserDo) FirstOrCreate() (*model.TempUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TempUser), nil
	}
}

func (t tempUserDo) FindByPage(offset int, limit int) (result []*model.TempUser, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempUserDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempUserDo) Delete(models ...*model.TempUser) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempUserDo) withDO(do gen.Dao) *tempUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
