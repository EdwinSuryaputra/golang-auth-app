// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/datasources/sql/gorm/model"
)

func newBuRequestBucket(db *gorm.DB, opts ...gen.DOOption) buRequestBucket {
	_buRequestBucket := buRequestBucket{}

	_buRequestBucket.buRequestBucketDo.UseDB(db, opts...)
	_buRequestBucket.buRequestBucketDo.UseModel(&model.BuRequestBucket{})

	tableName := _buRequestBucket.buRequestBucketDo.TableName()
	_buRequestBucket.ALL = field.NewAsterisk(tableName)
	_buRequestBucket.ID = field.NewInt32(tableName, "id")
	_buRequestBucket.UserID = field.NewInt32(tableName, "user_id")
	_buRequestBucket.BusinessUnitLevel = field.NewString(tableName, "business_unit_level")
	_buRequestBucket.BusinessUnitLocationID = field.NewInt32(tableName, "business_unit_location_id")
	_buRequestBucket.BusinessUnitLocation = field.NewString(tableName, "business_unit_location")
	_buRequestBucket.Status = field.NewString(tableName, "status")
	_buRequestBucket.ReviewedBy = field.NewString(tableName, "reviewed_by")
	_buRequestBucket.ReviewedAt = field.NewTime(tableName, "reviewed_at")
	_buRequestBucket.CreatedBy = field.NewString(tableName, "created_by")
	_buRequestBucket.CreatedAt = field.NewTime(tableName, "created_at")
	_buRequestBucket.UpdatedBy = field.NewString(tableName, "updated_by")
	_buRequestBucket.UpdatedAt = field.NewTime(tableName, "updated_at")
	_buRequestBucket.DeletedBy = field.NewString(tableName, "deleted_by")
	_buRequestBucket.DeletedAt = field.NewField(tableName, "deleted_at")
	_buRequestBucket.ActivityLogID = field.NewString(tableName, "activity_log_id")

	_buRequestBucket.fillFieldMap()

	return _buRequestBucket
}

type buRequestBucket struct {
	buRequestBucketDo buRequestBucketDo

	ALL                    field.Asterisk
	ID                     field.Int32
	UserID                 field.Int32
	BusinessUnitLevel      field.String
	BusinessUnitLocationID field.Int32
	BusinessUnitLocation   field.String
	Status                 field.String
	ReviewedBy             field.String
	ReviewedAt             field.Time
	CreatedBy              field.String
	CreatedAt              field.Time
	UpdatedBy              field.String
	UpdatedAt              field.Time
	DeletedBy              field.String
	DeletedAt              field.Field
	ActivityLogID          field.String

	fieldMap map[string]field.Expr
}

func (b buRequestBucket) Table(newTableName string) *buRequestBucket {
	b.buRequestBucketDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b buRequestBucket) As(alias string) *buRequestBucket {
	b.buRequestBucketDo.DO = *(b.buRequestBucketDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *buRequestBucket) updateTableName(table string) *buRequestBucket {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.UserID = field.NewInt32(table, "user_id")
	b.BusinessUnitLevel = field.NewString(table, "business_unit_level")
	b.BusinessUnitLocationID = field.NewInt32(table, "business_unit_location_id")
	b.BusinessUnitLocation = field.NewString(table, "business_unit_location")
	b.Status = field.NewString(table, "status")
	b.ReviewedBy = field.NewString(table, "reviewed_by")
	b.ReviewedAt = field.NewTime(table, "reviewed_at")
	b.CreatedBy = field.NewString(table, "created_by")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedBy = field.NewString(table, "updated_by")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedBy = field.NewString(table, "deleted_by")
	b.DeletedAt = field.NewField(table, "deleted_at")
	b.ActivityLogID = field.NewString(table, "activity_log_id")

	b.fillFieldMap()

	return b
}

func (b *buRequestBucket) WithContext(ctx context.Context) IBuRequestBucketDo {
	return b.buRequestBucketDo.WithContext(ctx)
}

func (b buRequestBucket) TableName() string { return b.buRequestBucketDo.TableName() }

func (b buRequestBucket) Alias() string { return b.buRequestBucketDo.Alias() }

func (b buRequestBucket) Columns(cols ...field.Expr) gen.Columns {
	return b.buRequestBucketDo.Columns(cols...)
}

func (b *buRequestBucket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *buRequestBucket) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 15)
	b.fieldMap["id"] = b.ID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["business_unit_level"] = b.BusinessUnitLevel
	b.fieldMap["business_unit_location_id"] = b.BusinessUnitLocationID
	b.fieldMap["business_unit_location"] = b.BusinessUnitLocation
	b.fieldMap["status"] = b.Status
	b.fieldMap["reviewed_by"] = b.ReviewedBy
	b.fieldMap["reviewed_at"] = b.ReviewedAt
	b.fieldMap["created_by"] = b.CreatedBy
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_by"] = b.UpdatedBy
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_by"] = b.DeletedBy
	b.fieldMap["deleted_at"] = b.DeletedAt
	b.fieldMap["activity_log_id"] = b.ActivityLogID
}

func (b buRequestBucket) clone(db *gorm.DB) buRequestBucket {
	b.buRequestBucketDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b buRequestBucket) replaceDB(db *gorm.DB) buRequestBucket {
	b.buRequestBucketDo.ReplaceDB(db)
	return b
}

type buRequestBucketDo struct{ gen.DO }

type IBuRequestBucketDo interface {
	gen.SubQuery
	Debug() IBuRequestBucketDo
	WithContext(ctx context.Context) IBuRequestBucketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBuRequestBucketDo
	WriteDB() IBuRequestBucketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBuRequestBucketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBuRequestBucketDo
	Not(conds ...gen.Condition) IBuRequestBucketDo
	Or(conds ...gen.Condition) IBuRequestBucketDo
	Select(conds ...field.Expr) IBuRequestBucketDo
	Where(conds ...gen.Condition) IBuRequestBucketDo
	Order(conds ...field.Expr) IBuRequestBucketDo
	Distinct(cols ...field.Expr) IBuRequestBucketDo
	Omit(cols ...field.Expr) IBuRequestBucketDo
	Join(table schema.Tabler, on ...field.Expr) IBuRequestBucketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBuRequestBucketDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBuRequestBucketDo
	Group(cols ...field.Expr) IBuRequestBucketDo
	Having(conds ...gen.Condition) IBuRequestBucketDo
	Limit(limit int) IBuRequestBucketDo
	Offset(offset int) IBuRequestBucketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBuRequestBucketDo
	Unscoped() IBuRequestBucketDo
	Create(values ...*model.BuRequestBucket) error
	CreateInBatches(values []*model.BuRequestBucket, batchSize int) error
	Save(values ...*model.BuRequestBucket) error
	First() (*model.BuRequestBucket, error)
	Take() (*model.BuRequestBucket, error)
	Last() (*model.BuRequestBucket, error)
	Find() ([]*model.BuRequestBucket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuRequestBucket, err error)
	FindInBatches(result *[]*model.BuRequestBucket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BuRequestBucket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBuRequestBucketDo
	Assign(attrs ...field.AssignExpr) IBuRequestBucketDo
	Joins(fields ...field.RelationField) IBuRequestBucketDo
	Preload(fields ...field.RelationField) IBuRequestBucketDo
	FirstOrInit() (*model.BuRequestBucket, error)
	FirstOrCreate() (*model.BuRequestBucket, error)
	FindByPage(offset int, limit int) (result []*model.BuRequestBucket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBuRequestBucketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buRequestBucketDo) Debug() IBuRequestBucketDo {
	return b.withDO(b.DO.Debug())
}

func (b buRequestBucketDo) WithContext(ctx context.Context) IBuRequestBucketDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buRequestBucketDo) ReadDB() IBuRequestBucketDo {
	return b.Clauses(dbresolver.Read)
}

func (b buRequestBucketDo) WriteDB() IBuRequestBucketDo {
	return b.Clauses(dbresolver.Write)
}

func (b buRequestBucketDo) Session(config *gorm.Session) IBuRequestBucketDo {
	return b.withDO(b.DO.Session(config))
}

func (b buRequestBucketDo) Clauses(conds ...clause.Expression) IBuRequestBucketDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buRequestBucketDo) Returning(value interface{}, columns ...string) IBuRequestBucketDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buRequestBucketDo) Not(conds ...gen.Condition) IBuRequestBucketDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buRequestBucketDo) Or(conds ...gen.Condition) IBuRequestBucketDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buRequestBucketDo) Select(conds ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buRequestBucketDo) Where(conds ...gen.Condition) IBuRequestBucketDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buRequestBucketDo) Order(conds ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buRequestBucketDo) Distinct(cols ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buRequestBucketDo) Omit(cols ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buRequestBucketDo) Join(table schema.Tabler, on ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buRequestBucketDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buRequestBucketDo) RightJoin(table schema.Tabler, on ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buRequestBucketDo) Group(cols ...field.Expr) IBuRequestBucketDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buRequestBucketDo) Having(conds ...gen.Condition) IBuRequestBucketDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buRequestBucketDo) Limit(limit int) IBuRequestBucketDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buRequestBucketDo) Offset(offset int) IBuRequestBucketDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buRequestBucketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBuRequestBucketDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buRequestBucketDo) Unscoped() IBuRequestBucketDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buRequestBucketDo) Create(values ...*model.BuRequestBucket) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buRequestBucketDo) CreateInBatches(values []*model.BuRequestBucket, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buRequestBucketDo) Save(values ...*model.BuRequestBucket) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buRequestBucketDo) First() (*model.BuRequestBucket, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuRequestBucket), nil
	}
}

func (b buRequestBucketDo) Take() (*model.BuRequestBucket, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuRequestBucket), nil
	}
}

func (b buRequestBucketDo) Last() (*model.BuRequestBucket, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuRequestBucket), nil
	}
}

func (b buRequestBucketDo) Find() ([]*model.BuRequestBucket, error) {
	result, err := b.DO.Find()
	return result.([]*model.BuRequestBucket), err
}

func (b buRequestBucketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuRequestBucket, err error) {
	buf := make([]*model.BuRequestBucket, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buRequestBucketDo) FindInBatches(result *[]*model.BuRequestBucket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buRequestBucketDo) Attrs(attrs ...field.AssignExpr) IBuRequestBucketDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buRequestBucketDo) Assign(attrs ...field.AssignExpr) IBuRequestBucketDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buRequestBucketDo) Joins(fields ...field.RelationField) IBuRequestBucketDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buRequestBucketDo) Preload(fields ...field.RelationField) IBuRequestBucketDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buRequestBucketDo) FirstOrInit() (*model.BuRequestBucket, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuRequestBucket), nil
	}
}

func (b buRequestBucketDo) FirstOrCreate() (*model.BuRequestBucket, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuRequestBucket), nil
	}
}

func (b buRequestBucketDo) FindByPage(offset int, limit int) (result []*model.BuRequestBucket, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buRequestBucketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buRequestBucketDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buRequestBucketDo) Delete(models ...*model.BuRequestBucket) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buRequestBucketDo) withDO(do gen.Dao) *buRequestBucketDo {
	b.DO = *do.(*gen.DO)
	return b
}
