// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"golang-auth-app/app/datasources/sql/gorm/model"
)

func newUserApplicationMapping(db *gorm.DB, opts ...gen.DOOption) userApplicationMapping {
	_userApplicationMapping := userApplicationMapping{}

	_userApplicationMapping.userApplicationMappingDo.UseDB(db, opts...)
	_userApplicationMapping.userApplicationMappingDo.UseModel(&model.UserApplicationMapping{})

	tableName := _userApplicationMapping.userApplicationMappingDo.TableName()
	_userApplicationMapping.ALL = field.NewAsterisk(tableName)
	_userApplicationMapping.ID = field.NewInt32(tableName, "id")
	_userApplicationMapping.UserID = field.NewInt32(tableName, "user_id")
	_userApplicationMapping.ApplicationID = field.NewInt32(tableName, "application_id")
	_userApplicationMapping.CreatedBy = field.NewString(tableName, "created_by")
	_userApplicationMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_userApplicationMapping.UpdatedBy = field.NewString(tableName, "updated_by")
	_userApplicationMapping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userApplicationMapping.DeletedBy = field.NewString(tableName, "deleted_by")
	_userApplicationMapping.DeletedAt = field.NewField(tableName, "deleted_at")

	_userApplicationMapping.fillFieldMap()

	return _userApplicationMapping
}

type userApplicationMapping struct {
	userApplicationMappingDo userApplicationMappingDo

	ALL           field.Asterisk
	ID            field.Int32
	UserID        field.Int32
	ApplicationID field.Int32
	CreatedBy     field.String
	CreatedAt     field.Time
	UpdatedBy     field.String
	UpdatedAt     field.Time
	DeletedBy     field.String
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (u userApplicationMapping) Table(newTableName string) *userApplicationMapping {
	u.userApplicationMappingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userApplicationMapping) As(alias string) *userApplicationMapping {
	u.userApplicationMappingDo.DO = *(u.userApplicationMappingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userApplicationMapping) updateTableName(table string) *userApplicationMapping {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.ApplicationID = field.NewInt32(table, "application_id")
	u.CreatedBy = field.NewString(table, "created_by")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedBy = field.NewString(table, "updated_by")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedBy = field.NewString(table, "deleted_by")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userApplicationMapping) WithContext(ctx context.Context) IUserApplicationMappingDo {
	return u.userApplicationMappingDo.WithContext(ctx)
}

func (u userApplicationMapping) TableName() string { return u.userApplicationMappingDo.TableName() }

func (u userApplicationMapping) Alias() string { return u.userApplicationMappingDo.Alias() }

func (u userApplicationMapping) Columns(cols ...field.Expr) gen.Columns {
	return u.userApplicationMappingDo.Columns(cols...)
}

func (u *userApplicationMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userApplicationMapping) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["application_id"] = u.ApplicationID
	u.fieldMap["created_by"] = u.CreatedBy
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_by"] = u.UpdatedBy
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_by"] = u.DeletedBy
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userApplicationMapping) clone(db *gorm.DB) userApplicationMapping {
	u.userApplicationMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userApplicationMapping) replaceDB(db *gorm.DB) userApplicationMapping {
	u.userApplicationMappingDo.ReplaceDB(db)
	return u
}

type userApplicationMappingDo struct{ gen.DO }

type IUserApplicationMappingDo interface {
	gen.SubQuery
	Debug() IUserApplicationMappingDo
	WithContext(ctx context.Context) IUserApplicationMappingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserApplicationMappingDo
	WriteDB() IUserApplicationMappingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserApplicationMappingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserApplicationMappingDo
	Not(conds ...gen.Condition) IUserApplicationMappingDo
	Or(conds ...gen.Condition) IUserApplicationMappingDo
	Select(conds ...field.Expr) IUserApplicationMappingDo
	Where(conds ...gen.Condition) IUserApplicationMappingDo
	Order(conds ...field.Expr) IUserApplicationMappingDo
	Distinct(cols ...field.Expr) IUserApplicationMappingDo
	Omit(cols ...field.Expr) IUserApplicationMappingDo
	Join(table schema.Tabler, on ...field.Expr) IUserApplicationMappingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserApplicationMappingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserApplicationMappingDo
	Group(cols ...field.Expr) IUserApplicationMappingDo
	Having(conds ...gen.Condition) IUserApplicationMappingDo
	Limit(limit int) IUserApplicationMappingDo
	Offset(offset int) IUserApplicationMappingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserApplicationMappingDo
	Unscoped() IUserApplicationMappingDo
	Create(values ...*model.UserApplicationMapping) error
	CreateInBatches(values []*model.UserApplicationMapping, batchSize int) error
	Save(values ...*model.UserApplicationMapping) error
	First() (*model.UserApplicationMapping, error)
	Take() (*model.UserApplicationMapping, error)
	Last() (*model.UserApplicationMapping, error)
	Find() ([]*model.UserApplicationMapping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserApplicationMapping, err error)
	FindInBatches(result *[]*model.UserApplicationMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserApplicationMapping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserApplicationMappingDo
	Assign(attrs ...field.AssignExpr) IUserApplicationMappingDo
	Joins(fields ...field.RelationField) IUserApplicationMappingDo
	Preload(fields ...field.RelationField) IUserApplicationMappingDo
	FirstOrInit() (*model.UserApplicationMapping, error)
	FirstOrCreate() (*model.UserApplicationMapping, error)
	FindByPage(offset int, limit int) (result []*model.UserApplicationMapping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserApplicationMappingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userApplicationMappingDo) Debug() IUserApplicationMappingDo {
	return u.withDO(u.DO.Debug())
}

func (u userApplicationMappingDo) WithContext(ctx context.Context) IUserApplicationMappingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userApplicationMappingDo) ReadDB() IUserApplicationMappingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userApplicationMappingDo) WriteDB() IUserApplicationMappingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userApplicationMappingDo) Session(config *gorm.Session) IUserApplicationMappingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userApplicationMappingDo) Clauses(conds ...clause.Expression) IUserApplicationMappingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userApplicationMappingDo) Returning(value interface{}, columns ...string) IUserApplicationMappingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userApplicationMappingDo) Not(conds ...gen.Condition) IUserApplicationMappingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userApplicationMappingDo) Or(conds ...gen.Condition) IUserApplicationMappingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userApplicationMappingDo) Select(conds ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userApplicationMappingDo) Where(conds ...gen.Condition) IUserApplicationMappingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userApplicationMappingDo) Order(conds ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userApplicationMappingDo) Distinct(cols ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userApplicationMappingDo) Omit(cols ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userApplicationMappingDo) Join(table schema.Tabler, on ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userApplicationMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userApplicationMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userApplicationMappingDo) Group(cols ...field.Expr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userApplicationMappingDo) Having(conds ...gen.Condition) IUserApplicationMappingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userApplicationMappingDo) Limit(limit int) IUserApplicationMappingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userApplicationMappingDo) Offset(offset int) IUserApplicationMappingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userApplicationMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserApplicationMappingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userApplicationMappingDo) Unscoped() IUserApplicationMappingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userApplicationMappingDo) Create(values ...*model.UserApplicationMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userApplicationMappingDo) CreateInBatches(values []*model.UserApplicationMapping, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userApplicationMappingDo) Save(values ...*model.UserApplicationMapping) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userApplicationMappingDo) First() (*model.UserApplicationMapping, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserApplicationMapping), nil
	}
}

func (u userApplicationMappingDo) Take() (*model.UserApplicationMapping, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserApplicationMapping), nil
	}
}

func (u userApplicationMappingDo) Last() (*model.UserApplicationMapping, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserApplicationMapping), nil
	}
}

func (u userApplicationMappingDo) Find() ([]*model.UserApplicationMapping, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserApplicationMapping), err
}

func (u userApplicationMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserApplicationMapping, err error) {
	buf := make([]*model.UserApplicationMapping, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userApplicationMappingDo) FindInBatches(result *[]*model.UserApplicationMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userApplicationMappingDo) Attrs(attrs ...field.AssignExpr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userApplicationMappingDo) Assign(attrs ...field.AssignExpr) IUserApplicationMappingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userApplicationMappingDo) Joins(fields ...field.RelationField) IUserApplicationMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userApplicationMappingDo) Preload(fields ...field.RelationField) IUserApplicationMappingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userApplicationMappingDo) FirstOrInit() (*model.UserApplicationMapping, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserApplicationMapping), nil
	}
}

func (u userApplicationMappingDo) FirstOrCreate() (*model.UserApplicationMapping, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserApplicationMapping), nil
	}
}

func (u userApplicationMappingDo) FindByPage(offset int, limit int) (result []*model.UserApplicationMapping, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userApplicationMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userApplicationMappingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userApplicationMappingDo) Delete(models ...*model.UserApplicationMapping) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userApplicationMappingDo) withDO(do gen.Dao) *userApplicationMappingDo {
	u.DO = *do.(*gen.DO)
	return u
}
